{"version":3,"sources":["views/Item/components/ItemCard/DetailsSection.tsx","views/Item/components/ItemCard/CardHeading.tsx","views/Item/components/ItemCard/CardActionsContainer.tsx","views/Item/components/ItemCard/ItemCard.tsx","views/Item/Item.tsx","config/constants/constants.ts","components/layout/Flex.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx"],"names":["Wrapper","styled","div","StyledLinkExternal","LinkExternal","theme","colors","text","primary","DetailsSection","details","image","seller","unit","total","justifyContent","style","marginBottom","href","fontSize","Flex","ContainerImage","Image","img","CardHeading","title","alignItems","mb","src","alt","fontWeight","Action","CardActions","contract","amount","id","account","mt","fullWidth","disabled","onClick","purchasePay","FCard","props","card","background","Divider","borderColor","ExpandingWrapper","expanded","FarmCard","ethereum","item","useState","showExpandableSection","setShowExpandableSection","ipfsHash","name","BigNumber","price","dividedBy","pow","toString","networkSymbol","CardActionsContainer","ExpandableSectionButton","description","Item","farmsProps","useWallet","contractNFT","useNFT","data","setData","setTitle","pathId","document","location","pathname","substring","dispatch","useDispatch","fastRefresh","useRefresh","useEffect","a","getAllSeller","res","getData","Page","as","size","color","textAlign","ItemCard","FlexLayout","aria-label","role","bold","defaultProps"],"mappings":"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","file":"static/js/12.a106618b.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionProps {\n  details?: string\n  image?: string\n  seller?: string\n  unit?: string\n  total?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  details,\n  image,\n  seller,\n  unit,\n  total\n}) => {\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"center\">\n        {details}\n      </Flex>\n\n      <span style={{ marginBottom: 20 }}>&nbsp;</span>\n      \n      <Flex justifyContent=\"center\">\n        <StyledLinkExternal href={\n          image\n        }>\n          HASH IPFS\n        </StyledLinkExternal>\n      </Flex>\n\n      <span style={{ marginBottom: 20 }}>&nbsp;</span>\n\n      <Flex justifyContent=\"center\">\n        Unit {unit} of {total}\n      </Flex>\n\n      <span style={{ marginBottom: 20 }}>&nbsp;</span>\n\n      <Flex justifyContent=\"center\">\n        <Link style={{ fontSize: 10 }} href={\n          `/collection/${seller}`\n        }>\n          {seller}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Heading, ImageCustom } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionProps {\n  image?: string\n  title?: string\n  unit?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst ContainerImage = styled.div`\n  position: relative;\n  background-position: center center;\n  background-repeat: no-repeat;\n  background-size: cover;\n  height: 450px;\n  max-width: 450px;\n  max-height: 450px;\n  width: 100%;\n  padding-top: 0%;\n`\n\nconst Image = styled.img`\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  max-width: 100%;\n  border-radius: 7px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  image,\n  title,\n  unit\n}) => {\n  return (\n    <div>\n      <Wrapper justifyContent=\"center\" alignItems=\"center\" mb=\"12px\">\n        {/* <ImageCustom src={image} alt={image} width={450} height={450} /> */}\n\n         <ContainerImage>\n          <Image \n            src={image} \n            alt={image} \n          />\n        </ContainerImage>\n      </Wrapper>\n      <Heading mb=\"5px\">{title} <span style={{ fontWeight: 'normal', fontSize: 14 }}> &nbsp; #{unit}</span></Heading>\n    </div>\n  )\n}\n\nexport default CardHeading\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport { purchasePay } from 'utils/callHelpers'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\n\ninterface FarmCardActionsProps {\n  contract?: any\n  account?: string\n  amount?: string\n  id?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ contract, amount, id, account }) => {\n  const renderApprovalOrStakeButton = () => {\n    return false ? (\n      // <StakeAction stakedBalance={null} tokenBalance={null} tokenName={lpName} pid={pid} depositFeeBP={depositFeeBP} />\n      null\n    ) : (\n      <Button mt=\"8px\" fullWidth disabled={false} onClick={() => purchasePay(contract, amount, id, account)}>\n        Buy\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      {renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport { networkSymbol } from 'config/constants/constants'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n  min-width: 500px;\n\n  @media (max-width: 768px) {\n    min-width: 330px;\n  }\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  ethereum?: provider\n  account?: string\n  item?: any\n  contract?: any\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ ethereum, account, item, contract }) => {\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n  return (\n    <FCard>\n      <CardHeading\n        image={`https://ipfs.io/ipfs/${item.ipfsHash}`}\n        title={item.name}\n        unit={item.unit}\n      />\n\n      <Flex justifyContent='center'>\n        <Text>{new BigNumber(item.price).dividedBy(new BigNumber(10).pow(18)).toString()} {networkSymbol}</Text>\n      </Flex>\n\n      <CardActionsContainer contract={contract} amount={item.price} id={item.id} account={account} />\n\n      <Divider />\n\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          details={item.description}\n          image={`https://ipfs.io/ipfs/${item.ipfsHash}`}\n          seller={item.seller}\n          unit={item.unit}\n          total={item.total}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React, { useEffect, useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Heading, Spinner } from '@pancakeswap-libs/uikit'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport useRefresh from 'hooks/useRefresh'\nimport ItemCard from './components/ItemCard/ItemCard'\nimport { getAllSeller } from '../../utils/callHelpers'\nimport { useNFT } from '../../hooks/useContract'\n\nexport interface FarmsProps{\n  tokenMode?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 70px;\n\n  @media (max-width: 768px) {\n    margin-left: 0px;\n    margin-right: 60px;\n  }\n`\n\nconst Item: React.FC<FarmsProps> = (farmsProps) => {\n\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const contractNFT = useNFT();\n\n  const [data, setData] = useState([]);\n  const [title, setTitle] = useState('');\n\n  const pathId = document.location.pathname.substring(5);\n\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    async function getData(){\n      const res = await getAllSeller(contractNFT, pathId)\n      res.id = pathId\n      setTitle(res?.name)\n      setData(res)\n    }\n    getData()\n  }, [account, dispatch, fastRefresh, contractNFT, pathId])\n\n\n  return (\n    <Page>\n      <Heading as=\"h2\" size=\"md\" color=\"\" mb=\"30px\" style={{ textAlign: 'center' }}>\n        {title}\n      </Heading>\n\n      <div>\n        {/* <Divider /> */}\n        <FlexLayout>\n          {true ? \n              <ItemCard\n                ethereum={ethereum}\n                account={account}\n                item={data}\n                contract={contractNFT}\n              />\n          : \n            <Wrapper>\n              <Spinner />\n            </Wrapper>\n          }\n         \n        </FlexLayout>\n      </div>\n      {/* <Image src=\"/images/egg/mill.gif\" alt=\"illustration\" width={600} height={400} responsive /> */}\n    </Page>\n  )\n}\n\nexport default Item\n","export const networkSymbol = 'MOVR';\r\nexport const network = 'Moonriver';\r\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n"],"sourceRoot":""}