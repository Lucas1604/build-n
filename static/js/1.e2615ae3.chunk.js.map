{"version":3,"sources":["utils/callHelpers.ts","hooks/useWeb3.ts","config/constants/index.ts","hooks/useContract.ts"],"names":["mintNFT","nftContract","ipfsHash","name","description","units","account","a","uni","parseInt","getCreateNFTFee","createFee","methods","send","from","value","toString","on","tx","transactionHash","purchasePay","amount","id","purchaseNFT","getAllTokens","call","getAllSeller","i","tokenIdToSellingItem","getOwnedTokens","getNFTs","digitalNFTs","getOwner","owner","createNFTFee","getBalance","withdrawBalance","withdraw","addNFTSellingItem","tokenId","price","BigNumber","replace","times","pow","cancelNFTSellingItem","getItemsSell","items","itemsSell","length","item","seller","push","getItemsSellByItems","getItemsWallet","itemsWallet","getItemsWalletSell","RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","useWeb3","ethereum","useWallet","refEth","useRef","useState","web3","setweb3","useEffect","current","farmsConfig","filter","farm","isCommunity","map","tokenSymbol","useContract","abi","address","contractOptions","eth","Contract","contract","setContract","useNFT","contractNFTabi","getContractNFT"],"mappings":"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","file":"static/js/1.e2615ae3.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const mintNFT = async (nftContract, ipfsHash, name, description, units, account) => {\n  let uni = units;\n\n  if(units === '') { uni = '1' }; // eslint-disable-line @typescript-eslint/no-extra-semi\n\n  if(parseInt(units) > 5) { uni = '5' }; // eslint-disable-line @typescript-eslint/no-extra-semi\n  \n  const createFee = await getCreateNFTFee(nftContract);\n  return nftContract.methods\n    .mintNFT(ipfsHash, name, description, 'img', parseInt(uni))\n    .send({ from: account, value: createFee.toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const purchasePay = async (nftContract, amount, id, account) => {\n  return nftContract.methods\n    .purchaseNFT(parseInt(id))\n    .send({ from: account, value: amount.toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const getAllTokens = async (nftContract) => {\n  return nftContract.methods.getAllTokens().call();\n}\n\nexport const getAllSeller = async (nftContract, i) =>{\n  return nftContract.methods.tokenIdToSellingItem(i).call();\n}\n\nexport const getOwnedTokens = async (nftContract, i) =>{\n  return nftContract.methods.getOwnedTokens(i).call();\n}\n\nexport const getNFTs = async (nftContract, i) =>{\n  return nftContract.methods.digitalNFTs(i).call();\n}\n\nexport const getOwner = async (nftContract) =>{\n  return nftContract.methods.owner().call();\n}\n\nexport const getCreateNFTFee = async (nftContract) =>{\n  return nftContract.methods.createNFTFee().call();\n}\n\nexport const getBalance = async (nftContract) =>{\n  return nftContract.methods.getBalance().call();\n}\n\nexport const withdrawBalance = async (nftContract, account) =>{\n  return nftContract.methods.withdraw()\n  .send({ from: account })\n  .on('transactionHash', (tx) => {\n    return tx.transactionHash\n  });\n}\n\nexport const addNFTSellingItem = async (nftContract, tokenId, price, account) =>{\n  return nftContract.methods.addNFTSellingItem(tokenId, new BigNumber(price.replace(',','.')).times(new BigNumber(10).pow(18)).toString())\n  .send({ from: account })\n  .on('transactionHash', (tx) => {\n    return tx.transactionHash\n  });\n}\n\nexport const cancelNFTSellingItem = async (nftContract, tokenId, account) =>{\n  return nftContract.methods.cancelNFTSellingItem(tokenId)\n  .send({ from: account })\n  .on('transactionHash', (tx) => {\n    return tx.transactionHash\n  });\n}\n\n\nexport const getItemsSell = async (nftContract) => {\n  const items = await getAllTokens(nftContract);\n  const itemsSell = [];\n\n   for(let i = 0; i < items.length; i++){\n      const item = await getAllSeller(nftContract, i);\n\n      if(item.seller !== \"0x0000000000000000000000000000000000000000\"){\n        item.id = items[i];\n        itemsSell.push(item)\n      }\n   }\n  return itemsSell;\n}\n\nexport const getItemsSellByItems = async (nftContract, account) => {\n  const items = await getAllTokens(nftContract);\n  const itemsSell = [];\n\n   for(let i = 0; i < items.length; i++){\n      const item = await getAllSeller(nftContract, i);\n\n      if(item.seller === account){\n        item.id = items[i];\n        itemsSell.push(item)\n      }\n   }\n  return itemsSell;\n}\n\nexport const getItemsWallet = async (nftContract, account) => {\n  const items = await getOwnedTokens(nftContract, account);\n  const itemsWallet = [];\n\n   for(let i = 0; i < items.length; i++){\n\n      const item = await getNFTs(nftContract, items[i]);\n      item.id = items[i];\n      itemsWallet.push(item)\n   }\n\n  return itemsWallet;\n}\n\nexport const getItemsWalletSell = async (nftContract, account) => {\n  const items = await getAllTokens(nftContract);\n  const itemsSell = [];\n\n  for(let i = 0; i < items.length; i++){\n    const item = await getAllSeller(nftContract, i);\n\n    if(item.seller === account){\n      item.id = items[i];\n      itemsSell.push(item)\n    }\n  }\n  return itemsSell;\n}","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { provider as ProviderType } from 'web3-core'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the ethereum provider change\n */\nconst useWeb3 = () => {\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\n  const refEth = useRef(ethereum)\n  const [web3, setweb3] = useState(new Web3(ethereum || httpProvider))\n\n  useEffect(() => {\n    if (ethereum !== refEth.current) {\n      setweb3(new Web3(ethereum || httpProvider))\n      refEth.current = ethereum\n    }\n  }, [ethereum])\n\n  return web3\n}\n\nexport default useWeb3\n","import farmsConfig from './farms'\n\nconst communityFarms = farmsConfig.filter((farm) => farm.isCommunity).map((farm) => farm.tokenSymbol)\n\nexport { farmsConfig, communityFarms }\nexport { default as poolsConfig } from './pools'\nexport { default as ifosConfig } from './ifo'\n","import { useEffect, useState } from 'react'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport useWeb3 from 'hooks/useWeb3'\nimport { getMasterChefAddress, getCakeAddress, getLotteryAddress, getLotteryTicketAddress, getContractNFT } from 'utils/addressHelpers'\nimport { poolsConfig } from 'config/constants'\nimport { PoolCategory } from 'config/constants/types'\nimport ifo from 'config/abi/ifo.json'\nimport erc20 from 'config/abi/erc20.json'\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\nimport pancakeRabbits from 'config/abi/pancakeRabbits.json'\nimport lottery from 'config/abi/lottery.json'\nimport lotteryTicket from 'config/abi/lotteryNft.json'\nimport masterChef from 'config/abi/masterchef.json'\nimport sousChef from 'config/abi/sousChef.json'\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\nimport contractNFTabi from 'config/abi/contractNFT.json'\n\n\nconst useContract = (abi: AbiItem, address: string, contractOptions?: ContractOptions) => {\n  const web3 = useWeb3()\n  const [contract, setContract] = useState(new web3.eth.Contract(abi, address, contractOptions))\n\n  useEffect(() => {\n    setContract(new web3.eth.Contract(abi, address, contractOptions))\n  }, [abi, address, contractOptions, web3])\n\n  return contract\n}\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoContract = (address: string) => {\n  const ifoAbi = (ifo as unknown) as AbiItem\n  return useContract(ifoAbi, address)\n}\n\nexport const useERC20 = (address: string) => {\n  const erc20Abi = (erc20 as unknown) as AbiItem\n  return useContract(erc20Abi, address)\n}\n\nexport const useCake = () => {\n  return useERC20(getCakeAddress())\n}\n\nexport const useRabbitMintingFarm = (address: string) => {\n  const rabbitMintingFarmAbi = (rabbitmintingfarm as unknown) as AbiItem\n  return useContract(rabbitMintingFarmAbi, address)\n}\n\nexport const usePancakeRabbits = (address: string) => {\n  const pancakeRabbitsAbi = (pancakeRabbits as unknown) as AbiItem\n  return useContract(pancakeRabbitsAbi, address)\n}\n\nexport const useLottery = () => {\n  const abi = (lottery as unknown) as AbiItem\n  return useContract(abi, getLotteryAddress())\n}\n\nexport const useLotteryTicket = () => {\n  const abi = (lotteryTicket as unknown) as AbiItem\n  return useContract(abi, getLotteryTicketAddress())\n}\n\nexport const useMasterchef = () => {\n  const abi = (masterChef as unknown) as AbiItem\n  return useContract(abi, getMasterChefAddress())\n}\n\nexport const useSousChef = (id) => {\n  const config = poolsConfig.find((pool) => pool.sousId === id)\n  const rawAbi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\n  const abi = (rawAbi as unknown) as AbiItem\n  return useContract(abi, config.contractAddress[process.env.REACT_APP_CHAIN_ID])\n}\n\nexport const useNFT = () => {\n  const abi = (contractNFTabi as unknown) as AbiItem\n  return useContract(abi, getContractNFT())\n}\n\n\nexport default useContract\n"],"sourceRoot":""}