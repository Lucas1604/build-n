{"version":3,"sources":["utils/getRpcUrl.ts","contexts/RefreshContext.tsx","hooks/useRefresh.ts","components/layout/Container.tsx","components/layout/Page.tsx","contexts/Localisation/translationsContext.ts","config/constants/types.ts","utils/addressHelpers.ts","config/constants/pools.ts","config/constants/contracts.ts","config/constants/farms.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","utils/web3.ts","state/farms/index.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","state/hooks.ts","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","App.tsx","contexts/BlockContext.tsx","state/index.ts","Providers.tsx","index.tsx"],"names":["nodes","getNodeUrl","randomIndex","random","length","RefreshContext","React","createContext","slow","fast","RefreshContextProvider","children","useState","setSlow","setFast","useEffect","interval","setInterval","a","prev","clearInterval","Provider","value","useRefresh","useContext","fastRefresh","slowRefresh","Container","styled","div","theme","mediaQueries","sm","Page","lg","defaultTranslationState","translations","setTranslations","TranslationsContext","QuoteToken","PoolCategory","getCakeAddress","addresses","cake","chainId","getMasterChefAddress","masterChef","getMulticallAddress","mulltiCall","getWbnbAddress","wbnb","getLotteryAddress","lottery","getLotteryTicketAddress","lotteryNFT","getContractNFT","contractNFT","pools","56","97","busd","1285","farms","pid","risk","lpSymbol","lpAddresses","tokenSymbol","tokenAddresses","quoteTokenSymbol","BNB","quoteTokenAdresses","contracts","YSOY","isTokenOnly","GlobalStyle","createGlobalStyle","colors","background","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","process","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","storedLangCode","localStorage","getItem","storedLang","filter","getStoredLang","console","log","fetch","then","r","json","translationApiResponse","data","catch","e","error","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","prevState","stringify","dark","light","useTheme","StyledThemeCopntext","RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","getWeb3","initialState","farmsConfig","farmsSlice","createSlice","name","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","map","farm","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","web3","poolsConfig","p","stakingTokenName","sousId","eth","Contract","masterChefABI","PoolsSlice","setPoolsPublicData","livePoolsData","pool","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","useFarmFromPid","BigNumber","useSelector","usePriceCakeBusd","address","window","config","label","icon","href","items","Menu","props","useWallet","account","connect","reset","cakePriceUsd","login","logout","currentLang","langs","setLang","toNumber","links","priceLink","Wrapper","PageLoader","Home","lazy","Wallet","Upload","Collection","Item","NotFound","EXPONENTIAL_AT","DECIMAL_PLACES","App","Global","fallback","exact","path","component","memo","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","getBlockNumber","blockNumber","current","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c7d4c99d.chunk.js","sourcesContent":["import random from 'lodash/random'\n\n// Array of available nodes to connect to\n// const nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\n\nconst nodes = ['https://rpc.moonriver.moonbeam.network', 'https://rpc.moonriver.moonbeam.network', 'https://rpc.moonriver.moonbeam.network']\n\nconst getNodeUrl = () => {\n  const randomIndex = random(0, nodes.length - 1)\n  return nodes[randomIndex]\n}\n\nexport default getNodeUrl\n","import React, { useState, useEffect } from 'react'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","import { useContext } from 'react'\nimport { RefreshContext } from 'contexts/RefreshContext'\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 992px;\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nexport default Container\n","import styled from 'styled-components'\nimport Container from './Container'\n\nconst Page = styled(Container)`\n  min-height: calc(100vh - 64px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\nexport default Page\n","import React, { createContext } from 'react'\n\nexport interface TranslationState {\n  translations: Array<any>\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\n}\n\nconst defaultTranslationState: TranslationState = {\n  translations: [],\n  setTranslations: (): void => undefined,\n}\n\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\n\nexport interface Ifo {\n  id: string\n  isActive: boolean\n  address: string\n  name: string\n  subTitle?: string\n  description?: string\n  launchDate: string\n  launchTime: string\n  saleAmount: string\n  raiseAmount: string\n  cakeToBurn: string\n  projectSiteUrl: string\n  currency: string\n  currencyAddress: string\n  tokenDecimals: number\n  releaseBlockNumber: number\n}\n\nexport enum QuoteToken {\n  'BNB' = 'BNB',\n  'CAKE' = 'CAKE',\n  'SYRUP' = 'SYRUP',\n  'BUSD' = 'BUSD',\n  'TWT' = 'TWT',\n  'UST' = 'UST',\n  'ETH' = 'ETH',\n  'BAKE' = 'BAKE',\n  'BTCB' = 'BTCB',\n  'SUSHI' = 'SUSHI',\n  'BURGER' = 'BURGER',\n  'LINK' = 'LINK',\n  'ADA' = 'ADA',\n  'DOT' = 'DOT',\n  'USDC' = 'USDC',\n  'TKO' = 'TKO',\n  'SHIBE' = 'SHIBE',\n  'DAI' = 'DAI',\n  'TRUST' = 'TRUST',\n  'ALICE' = 'ALICE',\n  'XVS' = 'XVS',\n  'CERTIK' = 'CERTIK',\n  'DOGE' = 'DOGE',\n  'TRON' = 'TRON',\n  'HELMET' = 'HELMET',\n  'XRP' = 'XRP',\n  'BUNNY' = 'BUNNY',\n  'YSOY' = 'YSOY'\n}\n\nexport enum PoolCategory {\n  'COMMUNITY' = 'Community',\n  'CORE' = 'Core',\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\n}\n\nexport interface Address {\n  97?: string\n  56: string\n}\n\nexport interface FarmConfig {\n  pid: number\n  lpSymbol: string\n  lpAddresses: Address\n  tokenSymbol: string\n  tokenAddresses: Address\n  quoteTokenSymbol: QuoteToken\n  quoteTokenAdresses: Address\n  multiplier?: string\n  isTokenOnly?: boolean\n  isCommunity?: boolean\n  risk: number\n  dual?: {\n    rewardPerBlock: number\n    earnLabel: string\n    endBlock: number\n  }\n}\n\nexport interface PoolConfig {\n  sousId: number\n  image?: string\n  tokenName: string\n  stakingTokenName: QuoteToken\n  stakingLimit?: number\n  stakingTokenAddress?: string\n  contractAddress: Address\n  poolCategory: PoolCategory\n  projectLink: string\n  tokenPerBlock: string\n  sortOrder?: number\n  harvest?: boolean\n  isFinished?: boolean\n  tokenDecimals: number\n}\n\nexport type Nft = {\n  name: string\n  description: string\n  originalImage: string\n  previewImage: string\n  blurImage: string\n  sortOrder: number\n  bunnyId: number\n}\n","import addresses from 'config/constants/contracts'\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nexport const getCakeAddress = () => {\n  return addresses.cake[chainId]\n}\nexport const getMasterChefAddress = () => {\n  return addresses.masterChef[chainId]\n}\nexport const getMulticallAddress = () => {\n  return addresses.mulltiCall[chainId]\n}\nexport const getWbnbAddress = () => {\n  return addresses.wbnb[chainId]\n}\nexport const getLotteryAddress = () => {\n  return addresses.lottery[chainId]\n}\nexport const getLotteryTicketAddress = () => {\n  return addresses.lotteryNFT[chainId]\n}\n\nexport const getContractNFT = () => {\n  return addresses.contractNFT[chainId]\n}\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\n\nconst pools: PoolConfig[] = [\n  // {\n  //   sousId: 0,\n  //   tokenName: 'CAKE',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\n  //   contractAddress: {\n  //     97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\n  //     56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://pancakeswap.finance/',\n  //   harvest: true,\n  //   tokenPerBlock: '10',\n  //   sortOrder: 1,\n  //   isFinished: false,\n  //   tokenDecimals: 18,\n  // },\n  // {\n  //   sousId: 1,\n  //   tokenName: 'TWT',\n  //   stakingTokenName: QuoteToken.SYRUP,\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\n  //   contractAddress: {\n  //     97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //     56: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://trustwallet.com/',\n  //   harvest: true,\n  //   tokenPerBlock: '20',\n  //   sortOrder: 999,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  // },\n]\n\nexport default pools\n","export default {\n  cake: {\n    56: '0xb4c20Bb1C75300Fa724ec3196B5d1C854a7d58a0',\n    97: '',\n  },\n  masterChef: {\n    56: '0xaE14db04Dcc3158dDE825Ccc1AcC365A796Fd279',\n    97: '',\n  },\n  wbnb: {\n    56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    97: '',\n  },\n  lottery: {\n    56: '',\n    97: '',\n  },\n  lotteryNFT: {\n    56: '',\n    97: '',\n  },\n  mulltiCall: {\n    56: '0x1ee38d535d541c55c9dae27b12edf090c608e6fb',\n    97: '0x67ADCB4dF3931b0C5Da724058ADC2174a9844412',\n  },\n  busd: {\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\n    97: '',\n  },\n  contractNFT: {\n    56: '0xeea52792cceb306d91753cf109811798069a6e03',\n    97: '0xeea52792cceb306d91753cf109811798069a6e03',\n    1285: '0xeea52792cceb306d91753cf109811798069a6e03'\n  }\n}\n","import contracts from './contracts'\nimport { FarmConfig, QuoteToken } from './types'\n\nconst farms: FarmConfig[] = [\n  {\n    pid: 1,\n    risk: 5,\n    lpSymbol: 'ySOY-BNB LP',\n    lpAddresses: {\n      97: '',\n      56: '0x541b8508dd127159e39866daa4d9d4f30b47da61',\n    },\n    tokenSymbol: 'yTOFU',\n    tokenAddresses: {\n      97: '',\n      56: '0x57488fcc3dc72edb0a4c06a356c2c43c08bdfb42',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 2,\n    risk: 5,\n    lpSymbol: 'ySOY-yTOFU LP',\n    lpAddresses: {\n      97: '',\n      56: '0x3d613a96f6700388c31bbb3d1fce22a2f86e5e00',\n    },\n    tokenSymbol: 'yTOFU',\n    tokenAddresses: {\n      97: '',\n      56: '0x57488fcc3dc72edb0a4c06a356c2c43c08bdfb42',\n    },\n    quoteTokenSymbol: QuoteToken.YSOY,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n\n  {\n    pid: 3,\n    risk: 5,\n    isTokenOnly: true,\n    lpSymbol: 'ySOY',\n    lpAddresses: {\n      97: '',\n      56: '0x57488fcc3dc72edb0a4c06a356c2c43c08bdfb42',\n    },\n    tokenSymbol: 'yTOFU',\n    tokenAddresses: {\n      97: '',\n      56: '0x57488fcc3dc72edb0a4c06a356c2c43c08bdfb42',\n    },\n    quoteTokenSymbol: QuoteToken.YSOY,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n\n  // {\n  //   pid: 1,\n  //   lpAddresses: {\n  //     56: '0x541b8508dd127159e39866daa4d9d4f30b47da61', \n  //   },\n  //   tokenAddresses: {\n  //     56: '0x57488fcc3dc72edb0a4c06a356c2c43c08bdfb42', \n  //   },\n  //   name: 'ySoy-BNB',\n  //   symbol: 'ySoy-BNB LP',\n  //   tokenSymbol: 'ySoy',\n  //   icon: ' ',\n  // },\n\n  // {\n  //   pid: 2,\n  //   lpAddresses: {\n  //     56: '0x3d613a96f6700388c31bbb3d1fce22a2f86e5e00', \n  //   },\n  //   tokenAddresses: {\n  //     56: '0x57488fcc3dc72edb0a4c06a356c2c43c08bdfb42', \n  //   },\n  //   name: 'ySoy-yTofu',\n  //   symbol: 'ySoy-yTofu LP',\n  //   tokenSymbol: 'yTofu',\n  //   icon: ' ',\n  // },\n\n\n  // POOLS\n\n\n  // {\n  //   pid: 24,\n  //   risk: 5,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'yTOFU',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0x19e7cbecdd23a16dfa5573df54d98f7caae03019', // EGG-BUSD LP\n  //   },\n  //   tokenSymbol: 'yTOFU',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0xf952fc3ca7325cc27d15885d37117676d25bfda6',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n \n]\n\nexport default farms\n","import { createGlobalStyle } from 'styled-components'\n// eslint-disable-next-line import/no-unresolved\nimport { PancakeTheme } from '@pancakeswap-libs/uikit'\n\ndeclare module 'styled-components' {\n  /* eslint-disable @typescript-eslint/no-empty-interface */\n  export interface DefaultTheme extends PancakeTheme {}\n}\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    font-family: 'Kanit', sans-serif;\n  }\n  body {\n    background-color: ${({ theme }) => theme.colors.background};\n\n    img {\n      height: auto;\n      max-width: 100%;\n    }\n  }\n`\n\nexport default GlobalStyle\n","export const EN = { code: 'en', language: 'English' }\nexport const AR = { code: 'ar', language: 'العربية' }\nexport const CA = { code: 'ca', language: 'Català' }\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\nexport const CS = { code: 'cs', language: 'Čeština' }\nexport const DA = { code: 'da', language: 'Dansk' }\nexport const DE = { code: 'de', language: 'Deutsch' }\nexport const NL = { code: 'nl', language: 'Nederlands' }\nexport const FIL = { code: 'fil', language: 'Filipino' }\nexport const FI = { code: 'fi', language: 'Suomalainen' }\nexport const FR = { code: 'fr', language: 'Français' }\nexport const EL = { code: 'el', language: 'Ελληνικά' }\nexport const HI = { code: 'hi', language: 'हिंदी' }\nexport const HU = { code: 'hu', language: 'Magyar' }\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\nexport const IT = { code: 'it', language: 'Italiano' }\nexport const JA = { code: 'ja', language: '日本語' }\nexport const KO = { code: 'ko', language: '한국어' }\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\nexport const RO = { code: 'ro', language: 'Română' }\nexport const RU = { code: 'ru', language: 'Русский' }\nexport const SR = { code: 'sr', language: 'Српски' }\nexport const ESES = { code: 'es-ES', language: 'Español' }\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\nexport const TA = { code: 'ta', language: 'தமிழ்' }\nexport const TR = { code: 'tr', language: 'Türkçe' }\nexport const UK = { code: 'uk', language: 'Українська' }\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\n\nexport const allLanguages = [\n  EN,\n  // AR,\n  // CA,\n  ZHCN,\n  ZHTW,\n  // CS,\n  // DA,\n  // DE,\n  // NL,\n  // FIL,\n  // FI,\n  // FR,\n  // EL,\n  // HI,\n  // HU,\n  // ID,\n  // IT,\n  // JA,\n  // KO,\n  // PTBR,\n  // RO,\n  // RU,\n  // SR,\n  // ESES,\n  // SVSE,\n  // TA,\n  // TR,\n  // UK,\n  // VI,\n]\n","import React, { useState, useEffect } from 'react'\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\n\nconst CACHE_KEY = 'pancakeSwapLanguage'\n\nexport interface LangType {\n  code: string\n  language: string\n}\n\nexport interface LanguageState {\n  selectedLanguage: LangType\n  setSelectedLanguage: (langObject: LangType) => void\n  translatedLanguage: LangType\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\n}\n\nconst LanguageContext = React.createContext({\n  selectedLanguage: EN,\n  setSelectedLanguage: () => undefined,\n  translatedLanguage: EN,\n  setTranslatedLanguage: () => undefined,\n} as LanguageState)\n\nconst fileId = 8\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\nconst stringTranslationsApi = new StringTranslations({\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\n})\n\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n}\n\nconst LanguageContextProvider = ({ children }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\n  const [translations, setTranslations] = useState<Array<any>>([])\n\n  const getStoredLang = (storedLangCode: string) => {\n    return allLanguages.filter((language) => {\n      return language.code === storedLangCode\n    })[0]\n  }\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode)\n      setSelectedLanguage(storedLang)\n    } else {\n      setSelectedLanguage(EN)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\n      fetch(`./i18n/${selectedLanguage.code}.json`)\n        .then(r=>r.json())\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\n        .then((translationApiResponse) => {\n          if (translationApiResponse.data.length < 1) {\n            setTranslations(['error'])\n          } else {\n            setTranslations(translationApiResponse.data)\n          }\n        })\n        .then(() => setTranslatedLanguage(selectedLanguage))\n        .catch((e) => {\n          console.error(\"ERROR\");\n          console.error(e);\n          setTranslations(['error'])\n        })\n    }\n  }, [selectedLanguage, setTranslations])\n\n  const handleLanguageSelect = (langObject: LangType) => {\n    setSelectedLanguage(langObject)\n    localStorage.setItem(CACHE_KEY, langObject.code)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\n    >\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\n    </LanguageContext.Provider>\n  )\n}\n\nexport { LanguageContext, LanguageContextProvider }\n","import React, { useState } from 'react'\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\nimport { light, dark } from '@pancakeswap-libs/uikit'\n\nconst CACHE_KEY = 'IS_DARK'\n\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\n\nconst ThemeContextProvider = ({ children }) => {\n  const [isDark, setIsDark] = useState(() => {\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\n  })\n\n  const toggleTheme = () => {\n    setIsDark((prevState) => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\n      return !prevState\n    })\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n","import { useContext } from 'react'\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\nimport { ThemeContext } from 'contexts/ThemeContext'\n\nconst useTheme = () => {\n  const { isDark, toggleTheme } = useContext(ThemeContext)\n  const theme = useContext(StyledThemeCopntext)\n  return { isDark, toggleTheme, theme }\n}\n\nexport default useTheme\n","import Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using our own private provider httpProver\n */\nconst getWeb3 = () => {\n  const web3 = new Web3(httpProvider)\n  return web3\n}\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\n}\n\nexport { getWeb3, getContract, httpProvider }\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst initialState: FarmsState = { data: [...farmsConfig] }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\n  const farms = await fetchFarms()\n  dispatch(setFarmsPublicData(farms))\n}\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport default farmsSlice.reducer\n","import { AbiItem } from 'web3-utils'\nimport poolsConfig from 'config/constants/pools'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport { getWeb3 } from 'utils/web3'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\nconst web3 = getWeb3()\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await web3.eth.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'userInfo',\n    params: [account],\n  }))\n  const userInfo = await multicall(sousChefABI, calls)\n  const stakedBalances = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\n\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'pendingReward',\n    params: [account],\n  }))\n  const res = await multicall(sousChefABI, calls)\n  const pendingRewards = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const pendingReward = await masterChefContract.methods.pendingTOFU('0', account).call()\n\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport poolsConfig from 'config/constants/pools'\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { PoolsState, Pool } from '../types'\n\nconst initialState: PoolsState = { data: [...poolsConfig] }\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStatking()\n\n  const liveData = poolsConfig.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    return {\n      ...blockLimit,\n      ...totalStaking,\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    pendingReward: pendingRewards[pool.sousId],\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n}\n\nexport default PoolsSlice.reducer\n","import BigNumber from 'bignumber.js'\nimport { useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\nimport { State, Farm, Pool } from './types'\nimport { QuoteToken } from '../config/constants/types'\n\nconst ZERO = new BigNumber(0)\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    // dispatch(fetchPoolsPublicDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\nexport const usePoolFromPid = (sousId): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return pool\n}\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const pid = 2 // BUSD-BNB LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  // const pid = 1 // CAKE-BNB LP\n  // const bnbPriceUSD = usePriceBnbBusd()\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n  const pid = 0; // EGG-BUSD LP\n  const farm = useFarmFromPid(pid);\n  // return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO;\n  return new BigNumber('1');\n\n}\n\nexport const useTotalValue = (): BigNumber => {\n  const farms = useFarms();\n  const bnbPrice = usePriceBnbBusd();\n  const cakePrice = usePriceCakeBusd();\n  let value = new BigNumber(0);\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (farm.lpTotalInQuoteToken) {\n      let val;\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        val = (bnbPrice.times(farm.lpTotalInQuoteToken));\n      }else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        val = (cakePrice.times(farm.lpTotalInQuoteToken));\n      }else{\n        val = (farm.lpTotalInQuoteToken);\n      }\n      value = value.plus(val);\n    }\n  }\n  return value;\n}","import { MenuEntry } from '@pancakeswap-libs/uikit'\n\nconst address = window.localStorage.getItem('accountAddress') === 'null' ? '' : window.localStorage.getItem('accountAddress');\n\nconst config: MenuEntry[] = [\n  {\n    label: 'Home',\n    icon: 'HomeIcon',\n    href: '/',\n  },\n  {\n    label: 'Wallet',\n    icon: 'WalletIcon',\n    href: '/wallet',\n  },\n  {\n    label: 'Create NFT',\n    icon: 'CreateIcon',\n    href: '/upload',\n  },\n  {\n    label: 'My collections',\n    icon: 'CollectionIcon',\n    href: `/collection/${address}`,\n  },\n  {\n    label: 'Social',\n    icon: 'SocialIcon',\n    items: [\n      // {\n      //   label: 'Telegram',\n      //   href: 'https://t.me/bargainNFT',\n      // },\n      {\n        label: 'Instagram',\n        href: 'https://www.instagram.com/bargainNFT',\n      }\n    ],\n  },\n]\n\nexport default config\n","import React, { useContext } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { allLanguages } from 'config/localisation/languageCodes'\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\nimport useTheme from 'hooks/useTheme'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { Menu as UikitMenu } from '@pancakeswap-libs/uikit'\nimport config from './config'\n\nconst Menu = (props) => {\n  const { account, connect, reset } = useWallet()\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\n  const { isDark, toggleTheme } = useTheme()\n  const cakePriceUsd = usePriceCakeBusd()\n\n  return (\n    <UikitMenu\n      account={account}\n      login={connect}\n      logout={reset}\n      isDark={isDark}\n      toggleTheme={toggleTheme}\n      currentLang={selectedLanguage && selectedLanguage.code}\n      langs={allLanguages}\n      setLang={setSelectedLanguage}\n      cakePriceUsd={cakePriceUsd.toNumber()}\n      links={config}\n      priceLink=\"https://www.coingecko.com/en/coins/\"\n      {...props}\n    />\n  )\n}\n\nexport default Menu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Spinner } from '@pancakeswap-libs/uikit'\nimport Page from './layout/Page'\n\nconst Wrapper = styled(Page)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PageLoader: React.FC = () => {\n  return (\n    <Wrapper>\n      <Spinner />\n    </Wrapper>\n  )\n}\n\nexport default PageLoader\n","import React, { useEffect, Suspense, lazy } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport GlobalStyle from './style/Global'\nimport Menu from './components/Menu'\nimport PageLoader from './components/PageLoader'\n\n// Route-based code splitting\n// Only pool is included in the main bundle because of it's the most visited page'\nconst Home = lazy(() => import('./views/Home'))\nconst Wallet = lazy(() => import('./views/Wallet'))\nconst Upload = lazy(() => import('./views/Upload'))\nconst Collection = lazy(() => import('./views/Collection'))\nconst Item = lazy(() => import('./views/Item'))\nconst NotFound = lazy(() => import('./views/NotFound'))\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nconst App: React.FC = () => {\n  const { account, connect } = useWallet()\n  useEffect(() => {\n      window.localStorage.setItem('accountAddress', account)\n\n    if (!account && window.localStorage.getItem('accountStatus')) {\n      connect('injected')\n    }\n  }, [account, connect])\n\n  // useFetchPublicData()\n\n  return (\n    <Router>\n      <ResetCSS />\n      <GlobalStyle />\n      <Menu>\n        <Suspense fallback={<PageLoader />}>\n          <Switch>\n            {/* <Route path=\"/home\">\n              <Home />\n            </Route> */}\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route path=\"/wallet\">\n              <Wallet />\n            </Route>\n            <Route path=\"/upload\">\n              <Upload />\n            </Route>\n            <Route path=\"/collection/:wallet\">\n              <Collection />\n            </Route>\n            <Route path=\"/nft/:id\">\n              <Item />\n            </Route>\n            <Route component={NotFound} />\n          </Switch>\n        </Suspense>\n      </Menu>\n    </Router>\n  )\n}\n\nexport default React.memo(App)\n","import React, { useState, useEffect, useRef } from 'react'\nimport { getWeb3 } from 'utils/web3'\n\nconst BlockContext = React.createContext(0)\n\nconst BlockContextProvider = ({ children }) => {\n  const previousBlock = useRef(0)\n  const [block, setBlock] = useState(0)\n\n  useEffect(() => {\n    const web3 = getWeb3()\n    const interval = setInterval(async () => {\n      const blockNumber = await web3.eth.getBlockNumber()\n      if (blockNumber !== previousBlock.current) {\n        previousBlock.current = blockNumber\n        setBlock(blockNumber)\n      }\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\n}\n\nexport { BlockContext, BlockContextProvider }\n","import { configureStore } from '@reduxjs/toolkit'\nimport farmsReducer from './farms'\nimport poolsReducer from './pools'\n\nexport default configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    farms: farmsReducer,\n    pools: poolsReducer,\n  },\n})\n","import React from 'react'\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\nimport * as bsc from '@binance-chain/bsc-use-wallet'\nimport { Provider } from 'react-redux'\nimport getRpcUrl from 'utils/getRpcUrl'\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\nimport { BlockContextProvider } from 'contexts/BlockContext'\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\nimport store from 'state'\n\nconst Providers: React.FC = ({ children }) => {\n  const rpcUrl = getRpcUrl()\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID);\n  return (\n    <Provider store={store}>\n      <ThemeContextProvider>\n        <LanguageContextProvider>\n          <bsc.UseWalletProvider\n            chainId={1285}\n            connectors={{\n              walletconnect: { rpcUrl },\n              bsc,\n            }}\n          >\n            <BlockContextProvider>\n              <RefreshContextProvider>\n                <ModalProvider>{children}</ModalProvider>\n              </RefreshContextProvider>\n            </BlockContextProvider>\n          </bsc.UseWalletProvider>\n        </LanguageContextProvider>\n      </ThemeContextProvider>\n    </Provider>\n  )\n}\n\nexport default Providers\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport Providers from './Providers'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}